import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.53f6f91f.js";const d=JSON.parse('{"title":"主题","description":"","frontmatter":{},"headers":[],"relativePath":"guide/theme.md","filePath":"guide/theme.md","lastUpdated":1697021397000}'),p={name:"guide/theme.md"},e=l(`<h1 id="主题" tabindex="-1">主题 <a class="header-anchor" href="#主题" aria-label="Permalink to &quot;主题&quot;">​</a></h1><p>基座的一个重要职能就是统一整个 PC 端管理后台的视觉呈现。</p><p>在旧的系统中，主题重复分散在各个子应用中，这导致更新维护起来比较麻烦，常常会出现视觉不统一的情况。</p><p>举个例子，在项目交付时，需要针对客户的需求和企业特色定义视觉，旧的系统中，我们需要对每个子应用都进行更新，然后再打包部署。这种工作繁琐且无聊。</p><p>现在由我们的基座来做这件事情，我们甚至可以做到不停机一键切换。</p><p>为了实现主题的灵活配置，基座做了以下调整：</p><ol><li>统一定义的 CSS 变量： CSS 变量是运行时变量，而 SCSS、Less 变量需要静态编译</li><li>组件库样式包外置：组件库的样式包不再编译并内嵌在基座和子应用中, 从而实现按需插拔</li><li>主题包机制：主题包是一个提供 CSS、JS 以及相关静态资源的 npm 包。配合我们的微前端运行容器, 可以实现一键挂载</li></ol><h2 id="统一定义的-css-变量" tabindex="-1">统一定义的 CSS 变量 <a class="header-anchor" href="#统一定义的-css-变量" aria-label="Permalink to &quot;统一定义的 CSS 变量&quot;">​</a></h2><p>定义了一套 CSS 变量集</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">:root</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">:root</span><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>我们规定： 无论什么时候，你都应该优先使用这套CSS 变量集, 而不是:</p><ul><li>引用 SCSS/Less 的静态变量</li><li>引用 ElementUI 这些组件库暴露出来的变量</li><li>硬编码主题色</li></ul><div class="tip custom-block"><p class="custom-block-title">注意</p><p>为什么不推荐引用 SCSS/Less 的变量?</p><p>因为这些变量是静态的，调整这些变量需要重新编译。而 CSS 变量集由主题包提供，并挂载在基座中，这些变量支持运行时修改和切换, 子应用不需要变更任何代码。</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>为什么不推荐引用 ElementUI/ElementPlus 的变量?</p><p>我们的提供的变量更加中立，不耦合任何框架。维护起来更轻松。</p></div><h2 id="组件库样式包外置" tabindex="-1">组件库样式包外置 <a class="header-anchor" href="#组件库样式包外置" aria-label="Permalink to &quot;组件库样式包外置&quot;">​</a></h2><p>为了实现主题动态切换，子应用、基座都不需要再导入 element-ui、element-plus 等相关组件库的 CSS 样式表。而是外置到主题包中维护。</p><p>因此，子应用集成到基座时应该把相对应的组件库样式导入移除:</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>element-ui</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;element-ui/lib/theme-chalk/index.css&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;element-ui/lib/theme-chalk/index.css&#39;</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>element-plus完整导入，移除:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;element-plus/dist/index.css&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;element-plus/dist/index.css&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果是 element-plus，且使用到了按需组件导入的功能，需要关闭样式导入：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">AutoImport</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;unplugin-auto-import/webpack&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Components</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;unplugin-vue-components/webpack&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">ElementPlusResolver</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;unplugin-vue-components/resolvers&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">AutoImport</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">-      resolvers: [</span><span style="color:#B392F0;">ElementPlusResolver</span><span style="color:#E1E4E8;">()],</span></span>
<span class="line"><span style="color:#E1E4E8;">+      resolvers: [</span><span style="color:#B392F0;">ElementPlusResolver</span><span style="color:#E1E4E8;">({importStyle: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">})],</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Components</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">-      resolvers: [</span><span style="color:#B392F0;">ElementPlusResolver</span><span style="color:#E1E4E8;">()],</span></span>
<span class="line"><span style="color:#E1E4E8;">+      resolvers: [</span><span style="color:#B392F0;">ElementPlusResolver</span><span style="color:#E1E4E8;">({importStyle: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">})],</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">AutoImport</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;unplugin-auto-import/webpack&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Components</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;unplugin-vue-components/webpack&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">ElementPlusResolver</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;unplugin-vue-components/resolvers&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">AutoImport</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">-      resolvers: [</span><span style="color:#6F42C1;">ElementPlusResolver</span><span style="color:#24292E;">()],</span></span>
<span class="line"><span style="color:#24292E;">+      resolvers: [</span><span style="color:#6F42C1;">ElementPlusResolver</span><span style="color:#24292E;">({importStyle: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">})],</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Components</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">-      resolvers: [</span><span style="color:#6F42C1;">ElementPlusResolver</span><span style="color:#24292E;">()],</span></span>
<span class="line"><span style="color:#24292E;">+      resolvers: [</span><span style="color:#6F42C1;">ElementPlusResolver</span><span style="color:#24292E;">({importStyle: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">})],</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>如果是手动导入，则不需要再安装 unplugin-element-plus 插件了。</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>还有一个重要的事情。我们推荐新的项目使用 vue3 + element-plus, 但是，element-ui、element-plus 的样式并不兼容。。</p><p>为了避免样式冲突，我们规定，element-plus 统一使用 ep 命名空间, 因此你的子应用需要做以下配置:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { RouterView } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue-router&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">+import</span><span style="color:#E1E4E8;"> { ElConfigProvider } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;element-plus&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ElConfigProvider namespace</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;ep&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">RouterView</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">ElConfigProvider</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { RouterView } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue-router&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">+import</span><span style="color:#24292E;"> { ElConfigProvider } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;element-plus&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ElConfigProvider namespace</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;ep&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">RouterView</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#D73A49;">+</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">ElConfigProvider</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></div><h2 id="主题包" tabindex="-1">主题包 <a class="header-anchor" href="#主题包" aria-label="Permalink to &quot;主题包&quot;">​</a></h2><p>我们定义了一套主题包机制，通过主题包可以定制以下内容：</p><ul><li>主题变量</li><li>组件库样式、页面样式</li><li>图片(比如 Logo)、文案</li><li>语言包</li><li>扩展 Javascript 代码</li><li>其他配置参数</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>注意: 无法通过主题包覆盖某些 Vue 页面，我们认为这些需求属于定制化需求。主题包仅限于样式、文案等层面的干预</p></div>`,24),o=[e];function r(t,c,i,E,y,u){return n(),a("div",null,o)}const b=s(p,[["render",r]]);export{d as __pageData,b as default};
